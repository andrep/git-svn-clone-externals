#!/bin/bash

function call()
{
    cmd="$@"
    echo "$cmd"
    eval "$cmd"
    return "$?"
}

function do_clone()
{
    test -d .git_externals || return 1
    
    cd ".git_externals/$(get_branch)"

    #Scape spaces in the path with backslash
    destination_scaped="$(echo ${destination} | sed -E 's/ /\\ /g')" 

    #Replace spaces in the url by %20
    remote_url_no_spaces="$(echo ${remote_url} | sed -r 's_ _%20_g')"

    echo "External destination $destination" 
    if [ -d "$destination" ]; then
        (
            echo "fetching all ... " $destination 
            cd "$destination"
            call git svn fetch -r HEAD
        )
    else
        
        call git svn clone -r" ${revision}" "$remote_url_no_spaces" "$destination_scaped"
    fi
    
}

function do_excludes()
{
    #Return to the top level directory
    top=$(git rev-parse --show-cdup)
    cd "$top"

    #Scape spaces in the path with backslash and remove the firt dot and slash
    dir=$(echo "${1}" | sed -E 's/ /\\ /g' | sed s_^\.\/__) 
    echo "Excluding $dir"
    git_excludes_path=.git/info/exclude
    if ! grep -q '^.git_externals$' "$git_excludes_path"
    then
        echo .git_externals >> "$git_excludes_path"
    fi

    if ! grep -q '^'"$dir"'$' "$git_excludes_path"
    then
        echo "$dir" >> "$git_excludes_path"
    fi
}

function is_excluded()
{
    local result=0
    if [ -f .git_externals_exclude ] ; then
        matches=`grep -v "^#" .git_externals_exclude|grep "^/$1$"|wc -l`
        if [ $matches -gt 0 ] ; then
            local result=1
        fi
    fi
    echo $result
    return
}

function git_svn_clone_externals()
{
	set -e

	toplevel_directory="$(git rev-parse --show-cdup)"
	[ -n "$toplevel_directory" ] && { echo "please run from the toplevel directory"; exit 1; }

	if isWindows; then
	    if ! net session &> /dev/null; then
	        echo 'Please run as administrator! It is required to create symbolic links.'; exit 1;
	    fi
	fi

	git svn show-externals | grep -vE '#|^$' | \
		sed 's/\(-r\)[ ]*\([0-9]\{1,\}\)/\1\2/' | \
		while read svn_externals
	do
		echo $svn_externals
			
		# First get the local directory in which the external was defined
		local_directory="$(echo ${svn_externals} | sed -r 's_\/(\.\.|\^|)\/.*__' )" 
		
		echo "Local directory ${local_directory}"

		# Now remove the local directory from the line and see what else we have
		local_directory_scaped="$(echo ${local_directory} | sed -r 's_\/_\\/_g')" 
		if [ -n "${local_directory_scaped}" ] ; then
			otherArguments="$(echo ${svn_externals} | sed -r "s_${local_directory_scaped}__")" 
		else
			otherArguments="${svn_externals}" 
		fi
		
		number_fields="$(echo ${otherArguments}|awk '{print NF}')"
		case $number_fields in
			2)
				revision=""
				remote_url="$(echo ${otherArguments} | awk '{print $1}')"
				local_folder="$(echo ${otherArguments} | awk '{print $2}')"
				;;
			3)
				revision=""$(echo ${otherArguments} | awk '{print $3}')
				remote_url="$(echo ${otherArguments} | awk '{print $1}')"
				local_folder="$(echo ${otherArguments} | awk '{print $2}')"
				;;
			*) continue ;;
		esac
		
		echo "Preprocessed remote ${remote_url}"

		destination=".${local_directory}/${local_folder}"
		
		check_excluded=$(is_excluded $destination)
		if [ $check_excluded -eq 0 ] ; then
		
			if [[ $remote_url == /../* ]]; then
				# We have relative paths in the remote Url.
				# Get rid of them using readlink 
				base_url=$(git svn info | grep 'URL: ' | sed -r 's_URL: __')
				canonicalPath=$(readlink -m "$local_directory$remote_url")
				remote_url=$base_url$canonicalPath
			fi

			if [[ $remote_url == //* ]]; then
				#  In this case the path relates to the same server
				root_url=$(git svn info | grep 'Repository Root: ' | sed -r 's_Repository Root: __')
				svn_server=$(echo $root_url | awk -F/ '{print $3}')
				protocol=$(echo $root_url | awk -F/ '{print $1}')
				remote_url=${protocol}//${svn_server}${remote_url}
			fi

			if [[ $remote_url == /^/* ]]; then
				root_url=$(git svn info | grep 'Repository Root: ' | sed -r 's_Repository Root: __')
				remote_url=$(echo $remote_url | sed -r 's_\^/__')
				remote_url=${root_url}${remote_url}
			fi

			if [ -n "$USE_SSH" ]; then
				echo "Rewriting url to use SVN+SSH."
				shopt -s extglob
				remote_url="${remote_url/+(http|https)/svn+ssh}"
			fi

			[ -z "${remote_url}" ] && continue

			if [ -n $revision ]; then
				revision="HEAD"
			fi


			export local_directory revision remote_url
		
			echo "DESTINATION: $destination -> REVISION: $revision -> REMOTE URL: $remote_url"

			dir=`dirname $destination`
			branch=$(get_branch)
			[ -d ".git_externals/${branch}/$dir" ] || mkdir -p ".git_externals/${branch}/$dir"
			echo "Cloning.............................."
			do_clone "$revision" "$remote_url" "$destination" || exit
			echo "Linking.............................."
			do_link "$destination"
			echo "Excludes............................."
			do_excludes "$destination"
			echo "Next item............................"
		fi

	done
}